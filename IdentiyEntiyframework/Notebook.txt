1)create .net core mvc template
2)appsetting.json write a connection string
3)create the database name IdentityManagerEntityFramework
4)create  folder database in solution
5)create a ApplicationDbcontext class inherated to IdentityDbContext
6)create a constructor ApplicationDbcontext pass the paramater DbContextOptions inherated to base options
7)install the required packages
   7.1)Microsoft.AspNetcore.Identiy.Entityframeworkcore
   7.2)Microsoft.Entiyframeworkcore
   7.3)Microsoft.Entiyframeworkcore.sqlserver
   7.4)Microsoft.Entiyframeworkcore.Tools
8)programs.cs file add the below line 
   builder.Services.AddDbContext<ApplicationDBcontext>(Options =>
Options.UseSqlServer(builder.Configuration.GetConnectionString("conn")));

9)Nuget package manager console run the below commands 
   9.1)Add-Migration <migrationName>  examplw Add-Migration AddIdentiytable (script genrate)
   9.2)Update-Database (database table update in database )

10)Add identity services in programs.cs 
builder.Services.AddIdentity<IdentityUser, IdentityRole>()
    .AddEntityFrameworkStores<ApplicationDBcontext>();

11)add extra column to user table
    add a class Applicationuser in model folder inhertied to IdentityUser
    create a property name Name
    add a the blow line ApplicationDBcontext
    public DbSet<Applicationuser> Applicationusers { get; set; }
    mange nuget package manger console 
    add-migration AddNameToAspNetUsersTable
    update-database
12)create a Register and LoginviewModel in model folder
13)create viewmodels loginview model register view model 
   create a cotrooler AccountController  
   create action  Register and view Register
    import _viewImports.cshtmladd global level@using IdentiyEntiyframework.Models.ViewModels
14)Login partial custom view create _LoginPartial  intilize the _layout.cshtml <partial name="_LoginPartial" />
15)create register action method in acoount coontroller register first user
16)Handle erros 
    private void AddErrors(IdentityResult result)
        {
            foreach(var error in result.Errors)
            {
                ModelState.AddModelError(string.Empty, error.Description);
            }
        }
 call the AddErrors() method
17)display the user 
loginpartial.cshtml 
@using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentiyEntiyframework.Models.Applicationuser> signInManager
@inject UserManager<IdentiyEntiyframework.Models.Applicationuser> userManager
18)LogOff in Accountcontroller
20)login view 
21)login in action and Return url in action
22)default password requiremnts
23)Lockout in action
24)forget password view 
25)send grid setup (must and should need  a domain)
   appseting.json "sendgrid":{
   "SecretKey":""
   }
  install the nuget pckage sendgrid
  create class EmailSender:IEmailSender 
26)Reset password token
27)Reset password view model
28)Reset pasword in Action
29)confirm email check in database 
30)Enable Authenticator Getendpoint
31)Enable Authentication view
32)enable authentication post login
33)setup Two Factor Auth on Account
34)Verfiy Authenticator Get Action
35) Verfiy Authenticator view 
36)Two factor Authenticator Action
37)QR code in action
38)Button to reset two factor auth 
39)RemoveAuthenticator two factor
======= Role Managment ========
40)Basic Authentication
41)create roles
42)display the roles in dropdown
43)Dynamic roles
44)Role selection during registration
45)configure application cookies

===========user List================
46)create user controller
47)user list
48) get the roles in database display the Role List
49)view for creating updating Role
50)edit and delete buttons Role
60)delete a role in ui 
61)Add toastor notification in ui
============Asign roles to user=========
62)Roles View Model
63)Get endpoint to mange Role
64)Display Roles assigned to a user
65)Assign Role to use4 assign role to user
66)Lock and unlock button
67)Lock and unlock  in action
68)Delete user
===========claim managment =============
69)Claim store (create a statick class list of create edit and delete)
